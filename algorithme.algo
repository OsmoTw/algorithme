ALGORITHM nb_length_in_sentence
VAR
 str : STRING : ="hello amazing world";
 count : INTEGER :=0;

BEGIN
    FOR (int i=0 ; i < str.length() ; i++ ) DO 
    IF (str.charAt[i] != " ") THEN
     count++;
     END_IF
    END_FOR
    write(count)
END




ALGORITHM nb_of_word_in_sentence
VAR
    str : STRING : ="hello amazing world";
    count : INTEGER :=1;

BEGIN
    FOR i str DO
    IF i == " " THEN
    count += 1
    END_IF
    END_FOR
    write(count)
END




ALGORITHM nb_of_vowels_in_sentence
VAR
    str : STRING : = "hello amazing world" ;
    count : INTEGER :=0;
    vowels : CHAR : = ["a","e","i","o","u"]
BEGIN
    FOR i in str DO
    IF i in vowels THEN
    count ++ ;
    END_IF;
    num_vowels = count ;
    END_FOR
    write(num_vowels)
END


ALGORITHM overlapping_elements
VAR
    set1,set2, : ARRAY_OF INTEGER[10];
    i,j = INTEGER;
    sum = INTEGER :=0 ;

BEGIN
    FOR i FROM 0 TO set1.length-1  DO

    FOR i FROM 0 TO set2.length-1 DO
          IF (set1[i] = set2[j]) THEN
          return TRUE ;
          BREAK ;
          ELSE 
          sum := sum + set1[i];
          END_IF 
    END_FOR

       FOR i FROM 0 TO set2.length-1  DO

       FOR i FROM 0 TO set1.length-1 DO
       IF (set2[i] = set1[j]) THEN
          return TRUE ;
          BREAK 
          ELSE
                 sum := sum + set2[i] ;
                 END_IF
                 END_FOR
        return FALSE ;
        END_FOR
        write(sum)
END










PROCEDURE insertion_sort(VAR array: ARRAY_OF INTEGER)
VAR
i,j,current: INTEGER;
BEGIN
    FOR i FROM 1 TO array.length-1 DO 
        current := array[i]
        j:=i-1
        WHILE (j>0 AND array[j]> current ) DO 
        array[j+1] := array[j]
        j:=j-1
        END_WHILE
        array[j+1] := current // RESET
        END_FOR
        END 








        FUNCTION verif_pol(str : STRING ) : BOOLEAN;
VAR 
  i: INTEGER;
BEGIN
  i := 1;
  IF (LENGTH(str) <= 1) THEN
    verif_pol := true;
  ELSE IF (str[i] <> str[LENGTH(str)]) THEN
    verif_pol := false;  
  ELSE
    i := i + 1;
    verif_pol := verif_pol(SUBSTR(str, 2, LENGTH(str) - 2));
  END_IF;
END;

